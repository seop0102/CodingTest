#include <iostream>
#include <algorithm> //sort함수 활용

using namespace std;

template <typename T>

class SimpleVector {
private:
    T* data;
    int currentSize;
    int currentCapacity;
    
public:
    void resize(int newCapacity) {
        //도전과제 구현
        //해당 정수가 현재 배열 크기보다 작으면 아무동작 X ,  크면 그만큼 재할당
        if (newCapacity <= currentCapacity) {
            cout<<"해당 정수가 현재 배열의 크기보다 작음" <<endl;
        }
        T* newData = new T[newCapacity];
        for (int p = 0; p<currentSize ; p++) {
            newData[p] = data[p];
        }
        delete[] data;
        data = newData;
        currentCapacity = newCapacity;
        cout << newCapacity <<" 만큼 늘어남" <<endl;
    } // 작거나 같으면 아무 동작 X

    SimpleVector() { //크기가 10인 배열을 만든다.
        currentSize = 0 ;
        currentCapacity = 10;
        data = new T [ currentCapacity];
        cout << "크기가 10인 배열" << endl;
    }
    SimpleVector(int capacity){ //해당 숫자에 해당되는 크기의 배열을 만든다.
        currentSize=0;
        currentCapacity = capacity;
        data = new T[currentCapacity];
        cout << currentCapacity << " 크기의 배열" <<endl;
    }
    //복사생성자 만들기 도전과제 구현
    SimpleVector(const SimpleVector& other) {
        currentSize = other.currentSize;
        currentCapacity = other.currentCapacity;
        data = new T[currentCapacity];
        
        for (int i = 0 ;  i<currentSize; i++) {
            data[i] = other.data[i];
        }
        cout << "복사 생성자 만들기 완료"<<endl;
    }
    
    ~SimpleVector() {
        delete[] data;
    }
    void push_back(const T& value) {
        if (currentSize < currentCapacity ) {
            data[currentSize] = value;
            currentSize++;
            cout << value << " 을 맨 뒤에 추가" <<endl;
        }
        else { //꽉 찼는데 원소가 들어오면 +5만큼 늘리고 새로운 원소 추가 (도전과제)
            int newCapacity = currentCapacity + 5 ;
            T* newData = new T[newCapacity];
            for (int k = 0 ; k<currentSize; k++) {
                newData[k]= data[k];
            }
            delete[] data;
            data = newData;
            currentCapacity = newCapacity;
            data[currentSize++] = value;
            cout << "용량을 +5만큼 늘림" <<endl;
            cout << value << " 을 추가" <<endl;
        }
    }
    void pop_back() {
        if(currentSize > 0 ){
            cout<<data[currentSize-1]<<" 제거" <<endl; 
            currentSize--;
        }else {
            cout<<"원소가 없어서 제거 못함!"<<endl;
        }
    }
    int size() {
        return currentSize;
    }
    int capacity() {
        return currentCapacity;
    }
    //도전과제 
    void sortData() {
        //STL sort함수 사용 정렬
        sort(data, data+currentSize);
        cout << "정렬 완료" <<endl;
    }
};

int main() {
    SimpleVector<int> vec(5);
    for (int i = 1; i<10; i ++ ) {
        vec.push_back(i);
    }
    for(int j = 1 ; j< 10 ; j++) {
        vec.pop_back();
    }

    cout << "사이즈(배열안에 들어있는 원소의 갯수) :  " << vec.size() << endl;
    cout << "이 배열의 용량 : " << vec.capacity() << endl;
}
