#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>

using namespace std; // namespace std 사용

class Book {
public:
    string title;
    string author;

    Book(const string& title, const string& author)
        : title(title), author(author) {}
};

class BookManager {
private:
    vector<Book> books; // 책 목록 저장

public:
    Book* findBookByTitle(const string& title){
        for (int i = 0; i < books.size(); i++) {
            if (books[i].title == title) {
                return &books[i];
            }
        }
        return nullptr;
    }
    Book* findBookByAuthor(const string& author) {
        for (int j = 0; j < books.size(); j++) {
            if (books[j].author == author) {
                return &books[j];
            }
        }
        return nullptr;
    }

    // 책 추가 메서드
    void addBook(const string& title, const string& author) {
        books.push_back(Book(title, author)); // push_back 사용
        cout << "책이 추가되었습니다: " << title << " by " << author << endl;
    }

    // 모든 책 출력 메서드
    void displayAllBooks() const {
        if (books.empty()) {
            cout << "현재 등록된 책이 없습니다." << endl;
            return;
        }

        cout << "현재 도서 목록:" << endl;
        for (size_t i = 0; i < books.size(); i++) { // 일반적인 for문 사용
            cout << i+1 << " ) " << books[i].title << " by " << books[i].author << endl;
        }
    }
    
    //도전과제 : 책 이름,작가로 대여여부 검색 
    Book* getBookByTitle (const string& title) {
        return findBookByTitle(title);
    }
    
    Book* getBookByAuthor(const string& author) {
        return findBookByAuthor(author);
    }
    
};

class BorrowManager {
private:
    unordered_map<string,int> stock;
public:
    void initializeStock(Book& book, int quantity = 3) {
        stock[book.title] = quantity;
    }
    
    void borrowBook(const string& title) {
        if (stock.find(title) != stock.end() && stock[title] > 0) {
            stock[title]--;
            cout << "!!!!!! 대여 완료 !!!!!! " << endl;
        } else {
            cout << "대여 실패 / 보유 수량 없음" << endl;
        }
    }
    void returnBook(const string& title) {
    auto it = stock.find(title);
    if (it == stock.end()) {
        cout << "반납 불가: 해당 책 없음" << endl;
        return;
    }

    if (it->second < 3) { // 초기 수량 3이라는 전제 조건 사용
        it->second++;
        cout << " !!!!!! 반납 완료 !!!!!!"<< endl;
    } else {
        cout << "반납 불가 / 현재 미보유 " << endl;
    }
    }
    void displayStock() {
        cout << "도서 재고 현황:" << endl;
        for (const auto& book : stock) {
            cout << book.first << ": " << book.second << "권" << endl;
        }
    }
    
};

int main() {
    BookManager manager;
    BorrowManager borrowManager;

    // 도서관 관리 프로그램의 기본 메뉴를 반복적으로 출력하여 사용자 입력을 처리합니다.
    // 프로그램 종료를 선택하기 전까지 계속 동작합니다.
    while (true) {
        cout << "\n도서관 관리 프로그램" << endl;
        cout << "1. 책 추가" << endl; // 책 정보를 입력받아 책 목록에 추가
        cout << "2. 모든 책 출력" << endl; // 현재 책 목록에 있는 모든 책 출력
        cout << "3. 책 제목으로 대여" <<endl; //책 제목으로 대여 가능
        cout << "4. 작가 이름으로 대여" <<endl; //작가로 대여 가능 
        cout << "5. 반납하기 " <<endl; //반납하기
        cout << "6. 종료" << endl; // 프로그램 종료
        cout << "선택: ";

        int choice; // 사용자의 메뉴 선택을 저장
        cin >> choice;

        if (choice == 1) {
            // 1번 선택: 책 추가
            // 사용자로부터 책 제목과 저자명을 입력받아 BookManager에 추가합니다.
            string title, author;
            cout << "책 제목: ";
            cin.ignore(); // 이전 입력의 잔여 버퍼를 제거
            getline(cin, title); // 제목 입력 (공백 포함)
            cout << "책 저자: ";
            getline(cin, author); // 저자명 입력 (공백 포함)
            manager.addBook(title, author); // 입력받은 책 정보를 추가
            Book* book = manager.getBookByTitle(title);
            if (book) {
            borrowManager.initializeStock(*book);
            }
        } else if (choice == 2) {
            // 2번 선택: 모든 책 출력
            // 현재 BookManager에 저장된 책 목록을 출력합니다.
            manager.displayAllBooks();
        } else if (choice == 3) {
            // 3번 선택: 책 이름으로 대여 가능 
            string title;
            cout << "대여할 책 제목 : ";
            cin.ignore();
            getline(cin, title);
            borrowManager.borrowBook(title);
        } else if (choice == 4) {
            // 4번 선택: 작가로 대여가능 
            string author;
            cout << "대여할 책의 작가 이름 : ";
            cin.ignore();
            getline(cin, author);
            Book* book = manager.getBookByAuthor(author);
            if (book) {
                borrowManager.borrowBook(book->title);
            }
        } else if (choice == 5) {
            // 5번 선택: 반납하기
            string title;
            cout << "반납할 책 제목 : ";
            cin.ignore();
            getline(cin, title);
            borrowManager.returnBook(title);
        } else if (choice == 6) {
            // 6번 선택: 종료
            // 프로그램을 종료하고 사용자에게 메시지를 출력합니다.
            cout << "프로그램을 종료합니다." << endl;
            break; // while 루프 종료
        } else {
            // 잘못된 입력 처리
            // 메뉴에 없는 번호를 입력했을 경우 경고 메시지를 출력합니다.
            cout << "잘못된 입력입니다. 다시 시도하세요." << endl;
        }
    }

    return 0; // 프로그램 정상 종료
}
